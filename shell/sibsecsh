#!/bin/bash
#
#  sibsecsh - 2FA shell
#  Copyright (C) 2019 Zhang Maiyun <myzhang1029@163.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

trap 'exit 1' PIPE


# All of these could be overridden in ~/.secrc
SIB_MY_IP=192.168.2.112
SIB_COUNT=1
SIB_HOME=$HOME
SIB_EMAIL='target@example.com'
SIB_SHELL='/bin/zsh'
SIB_SHELL_ARGS='--login'
SIB_LOG='/var/log/sibsecsh.log'
SIB_TMPDIR="$SIB_HOME/.cache/sibsecsh"
SIB_MAIL_HOST="example.com"
SIB_MAIL_FROM="none@example.com"
SIB_MAIL_PASSWORDEVAL="echo 123456"
SIB_MAIL_USERNAME="none"


who="/usr/bin/who -u am i"
msmtp="/usr/local/bin/msmtp"
awk="/usr/bin/awk"
sed="/usr/bin/sed"
pcregrep="/usr/local/bin/pcregrep"

[ -n "$SIB_FROM_IP" ] && SIB_FIRST_LOGIN=false || SIB_FIRST_LOGIN=true
SIB_FROM_IP=`$who 2> /dev/null | $awk '{print $NF}' | $sed -e 's/[()]//g'`
#[ ! -z "${SIB_FROM_IP##*.*}" ] && SIB_FROM_IP="$SIB_MY_IP" || true
#[ "$SIB_FROM_IP" = "$SIB_MY_IP" ] && SIB_FROM_IP="reverse shell" || true
[ ! -z "${SIB_FROM_IP##*.*}" ] && SIB_FROM_IP="reverse shell" || true
export SIB_FROM_IP

function islocal()
{
    [ "`echo $SIB_FROM_IP | cut -d . -f -3`" = "`echo $SIB_MY_IP | cut -d . -f -3`" ]
    return $?
}

# Startup
#  Check for rc file
if [ ! -f $SIB_HOME/.secrc ]
then
	echo "sibsecsh: ERROR: no $SIB_HOME/.secrc"
    exec /bin/bash
else
    # This should be written by the user, so we trust it
	. $SIB_HOME/.secrc
fi

#  Check for $SIB_LOGIN and $SIB_EMAIL
if ! echo $SIB_EMAIL | $pcregrep '^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$' > /dev/null
then
	echo "sibsecsh: ERROR: malformed \$SIB_EMAIL"
    exec /bin/bash
fi

mkdir -p $SIB_TMPDIR
#  These values shouldn't be set in the rc
SIB_TRUSTED_ENV="false"
shadowmail=`echo $SIB_EMAIL | sed "s/......@/*****@/"`
shadowed=`echo $SIB_EMAIL | sed "s/@.*//"`
shadowed=${shadowed:${#shadowed}-6}

while [[ $# -gt 0 ]]
do
    case "$1" in
        -c)
            # As a shell, for security, instead of executing directly,
            # the email code is requested with the first connection,
            # and the code should be included in the second connection.
            if [ -f $SIB_HOME/NoSec ] || islocal
            then
                exec $SIB_SHELL -c "$2"
            elif [ "$2" = "$SIB_EMAIL" ]
            then
		        SIB_RAND=$RANDOM
                $msmtp --host="$SIB_MAIL_HOST" --from="$SIB_MAIL_FROM" --passwordeval="$SIB_MAIL_PASSWORDEVAL" --user="$SIB_MAIL_USERNAME" --auth=plain -t << ENDMAIL
From: SIB Secure Shell <$SIB_MAIL_FROM>
To: $SIB_EMAIL
Subject: Login Code

Your code is :$SIB_RAND, prepend it to the cmdline.
ENDMAIL
                echo $SIB_RAND > $SIB_TMPDIR/sib_code
                exit 0
            elif [ -f $SIB_TMPDIR/sib_code ] # XXX: reentrant
            then
                SIB_RAND=`cat $SIB_TMPDIR/sib_code`
                SIB_INPUT=${2:0:${#SIB_RAND}}
		        if [ "$SIB_RAND" = "$SIB_INPUT" ]
                then
                    exec $SIB_SHELL -c "${2:${#SIB_RAND}}"
                else
                    echo "ERROR1: Wrong or missing code"
                fi
                exit 0
            else
                echo "ERROR2: Request a email code"
                exit 0
            fi
            ;;
        -tr)
            SIB_TRUSTED_ENV="true"
            ;;
        *)
            # Pass the rest directly to the shell
            SIB_SHELL_ARGS="$SIB_SHELL_ARGS $1"
    esac
    shift
done

# Accept second logins
if [ "$SIB_FIRST_LOGIN" = "false" ]
then
	echo "WARNING: second login accepted, who output:" >> $SIB_LOG
	$who >> $SIB_LOG
	exec $SIB_SHELL $SIB_SHELL_ARGS
fi

# Log
echo login attempt at `/bin/date` from $SIB_FROM_IP for `/usr/bin/logname` >> $SIB_LOG

# Accept local logins
if islocal
then
	echo "WARNING: local login accepted, who output:" >> $SIB_LOG
	$who >> $SIB_LOG
	exec $SIB_SHELL $SIB_SHELL_ARGS
fi

# Disable sibsecsh check
if [ -f $SIB_HOME/NoSec ] || [ "$SIB_TRUSTED_ENV" = "true" ]
then
	exec $SIB_SHELL $SIB_SHELL_ARGS
fi

# Match Email addr
while true
do
	read -p "Enter your email match \"$shadowmail\": " SIB_INPUT
	if [ "$SIB_INPUT" = "$SIB_EMAIL" ] || [ "$SIB_INPUT" = "$shadowed" ]
    then
		SIB_RAND=$RANDOM
        $msmtp --host="$SIB_MAIL_HOST" --from="$SIB_MAIL_FROM" --passwordeval="$SIB_MAIL_PASSWORDEVAL" --user="$SIB_MAIL_USERNAME" --auth=plain -t << ENDMAIL
From: SIB Secure Shell <$SIB_MAIL_FROM>
To: $SIB_EMAIL
Subject: Login Code

Your code($SIB_COUNT) is $SIB_RAND.
ENDMAIL
		break
	else
		echo "Not match"
		continue
	fi
done

# Resend code or accept login 
while true
do
	read -p 'Enter the code sent to your email address, 0 to resend:' SIB_INPUT
	if [ "$SIB_INPUT" = "0" ]
    then 
		let SIB_COUNT+=1
        $msmtp --host="$SIB_MAIL_HOST" --from="$SIB_MAIL_FROM" --passwordeval="$SIB_MAIL_PASSWORDEVAL" --user="$SIB_MAIL_USERNAME" --auth=plain -t << ENDMAIL
From: SIB Secure Shell <$SIB_MAIL_FROM>
To: $SIB_EMAIL
Subject: Login Code

Your code($SIB_COUNT) is $SIB_RAND.
ENDMAIL
	else
		if [ "$SIB_RAND" = "$SIB_INPUT" ]
        then
			echo "Logged in!"
			exec $SIB_SHELL $SIB_SHELL_ARGS

		else
			echo "Not Match"
			continue
		fi
	fi
done

