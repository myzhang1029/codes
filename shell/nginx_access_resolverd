#!/bin/bash
#
#  nginx_access_resolverd - Resolve IPs in Nginx access.log to MACs by asking the router through SSH
#  Copyright (C) 2022 Zhang Maiyun <me@myzhangll.xyz>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Set in nginx.conf:
# access_log syslog:server=unix:/dev/log,tag=ngx_access;


OUTPUT=/var/log/nginx/access_froms.log

# stdin for ssh
SSH_BUFFER_0=$(mktemp -u)
mkfifo "$SSH_BUFFER_0"
# stdout for ssh
SSH_BUFFER_1=$(mktemp -u)
mkfifo "$SSH_BUFFER_1"

# Spawn ssh the IP->MAC resolver
exec 3<>"$SSH_BUFFER_0" 4<>"$SSH_BUFFER_1"
rm "$SSH_BUFFER_0" "$SSH_BUFFER_1"
ssh root@192.168.9.1 <&3 >&4 2> /dev/null &
SSH_FD=$!

# Clean up
cleanup() {
    kill "$SSH_FD"
    exec 3>&- 4>&-
}
trap cleanup INT TERM

# Find MAC addresses with a RE
extract_mac() {
    grep -Eo '([a-zA-Z0-9]{2}:){5}[a-zA-Z0-9]{2}'
}

# Resolve IPs to MACs with a background SSH process
resolve_ip() {
    # Give command info FD3
    echo "arping -c 2 -I eth1 '$1'" >&3 
    # Read from the SSH process through FD4
    while read -r -t2 -u4; do echo "$REPLY"; done | extract_mac | sort | uniq | tr '\n' ' '
} 

# Produce an output for the log
resolve_ip_ctx() {
    echo "$(date -Iseconds), $1 is $(resolve_ip "$1")"
}

# Stream the log, parse into IP addresses, merge adjacent dups, and process
stdbuf -oL journalctl -n0 -fu nginx -o cat | \
    stdbuf -oL sed "s/^$(hostname) ngx_access: \(\([0-9]*\.\)\{3\}[0-9]*\).*/\1/" | \
    stdbuf -oL grep -o '[0-9.]*' | \
    stdbuf -oL uniq | \
    while read -r
do
    echo "Resolving $REPLY"
    resolve_ip_ctx "$REPLY" | tee -a "$OUTPUT"
done

cleanup
